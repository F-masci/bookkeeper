/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 09 14:58:10 GMT 2025
 */

package org.apache.bookkeeper.bookie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.apache.bookkeeper.conf.ServerConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JournalChannel_ESPitTest extends JournalChannel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          assertNotNull(mockFile0);
          
          ServerConfiguration serverConfiguration0 = new ServerConfiguration();
          assertNotNull(serverConfiguration0);
          assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
          assertFalse(serverConfiguration0.isDetailEvents());
          
          DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
          assertNotNull(defaultFileChannelProvider0);
          assertFalse(defaultFileChannelProvider0.supportReuseFile());
          
          JournalChannel journalChannel0 = new JournalChannel(mockFile0, 4L, 4L, 1, 1, true, 1534, serverConfiguration0, defaultFileChannelProvider0);
          assertNotNull(journalChannel0);
          assertEquals("", mockFile0.getName());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.isFile());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.exists());
          assertEquals("", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
          assertFalse(serverConfiguration0.isDetailEvents());
          assertFalse(defaultFileChannelProvider0.supportReuseFile());
          
          journalChannel0.preAllocIfNeeded(60L);
          assertEquals("", mockFile0.getName());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.isDirectory());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.isAbsolute());
          assertFalse(mockFile0.isFile());
          assertNull(mockFile0.getParent());
          assertTrue(mockFile0.canExecute());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.exists());
          assertEquals("", mockFile0.toString());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertFalse(mockFile0.isHidden());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
          assertFalse(serverConfiguration0.isDetailEvents());
          assertFalse(defaultFileChannelProvider0.supportReuseFile());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("``iek6&bHk\"H2M&\"6_", "op\n>");
      assertNotNull(mockFile0);
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 72057594037927808L);
      assertNotNull(journalChannel0);
      assertEquals("op\n>", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/``iek6&bHk\"H2M&\"6_/op\n>", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/``iek6&bHk\"H2M&\"6_", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      journalChannel0.preAllocIfNeeded(72057594037927808L);
      assertEquals("op\n>", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/``iek6&bHk\"H2M&\"6_/op\n>", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/``iek6&bHk\"H2M&\"6_", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      journalChannel0.preAllocIfNeeded(72057594037927808L);
      assertEquals("op\n>", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/``iek6&bHk\"H2M&\"6_/op\n>", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/``iek6&bHk\"H2M&\"6_", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, (-8388096L), 1304L, 64, 8L, serverConfiguration0, defaultFileChannelProvider0);
      assertNotNull(journalChannel0);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      int int0 = journalChannel0.getFormatVersion();
      assertEquals(5, int0);
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = MockFile.createTempFile("r)&Pl3w#`~-IyU", "-7Cuy-1H^F?cQ)&h");
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/r)&Pl3w#`~-IyU0-7Cuy-1H^F?cQ)&h", file0.toString());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("r)&Pl3w#`~-IyU0-7Cuy-1H^F?cQ)&h", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      MockFile mockFile0 = new MockFile(file0, "r)&Pl3w#`~-IyU");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      
      try { 
        JournalChannel.renameJournalFile(mockFile0, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to rename file /tmp/r)&Pl3w#`~-IyU0-7Cuy-1H^F?cQ)&h/r)&Pl3w#`~-IyU to /tmp/r)&Pl3w#`~-IyU0-7Cuy-1H^F?cQ)&h
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(serverConfiguration0.isDetailEvents());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ffffffffffffea59.txn");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "limitStatsLogging");
      assertTrue(boolean0);
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel((File) null, (-5543L), (-5543L), (-2761), (-5543L), serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("isK~OE!XX");
      assertNotNull(mockFile0);
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 1196L);
      assertNotNull(journalChannel0);
      assertEquals("isK~OE!XX", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("isK~OE!XX", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int0 = journalChannel0.read(byteBuffer0);
      assertEquals(2, int0);
      assertEquals(2, byteArray0.length);
      assertEquals("isK~OE!XX", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("isK~OE!XX", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteBuffer0.limit());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        JournalChannel.renameJournalFile(mockFile0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 5150L);
      assertNotNull(journalChannel0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      journalChannel0.close();
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      try { 
        journalChannel0.read(journalChannel0.zeros);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JournalChannel journalChannel0 = new JournalChannel((File) null, 0);
      assertNotNull(journalChannel0);
      
      // Undeclared exception!
      try { 
        journalChannel0.read((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.netty.handler.codec.DefaultHeaders", "op\n>");
      assertNotNull(mockFile0);
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 72057594037927808L);
      assertNotNull(journalChannel0);
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("op\n>", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders/op\n>", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      journalChannel0.close();
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("op\n>", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders/op\n>", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      try { 
        journalChannel0.preAllocIfNeeded(72057594037927808L);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.netty.handler.codec.DefaultHeaders", "op\n>");
      assertNotNull(mockFile0);
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 72057594037927808L);
      assertNotNull(journalChannel0);
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders/op\n>", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("op\n>", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      journalChannel0.bc = null;
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders/op\n>", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/io.netty.handler.codec.DefaultHeaders", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("op\n>", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      // Undeclared exception!
      try { 
        journalChannel0.preAllocIfNeeded(72057594037927808L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@6)Jx+ZH/bl%@$y");
      assertNotNull(mockFile0);
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 1399L);
      assertNotNull(journalChannel0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("@6)Jx+ZH/bl%@$y", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("@6)Jx+ZH", mockFile0.getParent());
      assertEquals("bl%@$y", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      
      journalChannel0.close();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("@6)Jx+ZH/bl%@$y", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals("@6)Jx+ZH", mockFile0.getParent());
      assertEquals("bl%@$y", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      
      try { 
        journalChannel0.forceWrite(false);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar/ffffffffff800200.txn");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, (-8388096L), 1304L, 64, 8L, serverConfiguration0, defaultFileChannelProvider0);
      assertNotNull(journalChannel0);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      // Undeclared exception!
      try { 
        journalChannel0.forceWrite(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("op\n>");
      assertNotNull(mockFile0);
      
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 72057594037927808L);
      assertNotNull(journalChannel0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("op\n>", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("op\n>", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        journalChannel0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /*@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(serverConfiguration0.isDetailEvents());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = new JournalChannel((File) null, 1048576L, 576L, Integer.MAX_VALUE, serverConfiguration0, defaultFileChannelProvider0);
  }*/

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("C+wv*mE>", "C+wv*mE>");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/C+wv*mE>0C+wv*mE>", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("C+wv*mE>0C+wv*mE>", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(serverConfiguration0.isDetailEvents());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(file0, 72057594037927808L, (-9223372036854775808L), (-3477), serverConfiguration0, (FileChannelProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(serverConfiguration0.isDetailEvents());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel((File) null, (-2443L), (-2443L), 1055, serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("More values received than expected (", "");
      assertNotNull(mockFile0);
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, 300000L, (-47L), (-1787112636), serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -1787112636 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("r)&Pl3w#`~-IyU", "-7Cuy-1H^F?cQ)&h");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/r)&Pl3w#`~-IyU0-7Cuy-1H^F?cQ)&h", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals("r)&Pl3w#`~-IyU0-7Cuy-1H^F?cQ)&h", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(file0, 128L, (-1038L), 1226, serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File /tmp/r)&Pl3w#`~-IyU0-7Cuy-1H^F?cQ)&h/80.txn suddenly appeared, is another bookie process running?
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h[{fy*{;dZ&#ZDkn", "h[{fy*{;dZ&#ZDkn");
      assertNotNull(mockFile0);
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(serverConfiguration0.isDetailEvents());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, (-4961L), 0L, 0, 0L, serverConfiguration0, (FileChannelProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      assertFalse(serverConfiguration0.isDetailEvents());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel((File) null, 0L, 3102L, (-2534), 0L, serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -2534 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("5PUB@%}^F", "B|!_=le|0R", (File) null);
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("5PUB@%}^F0B|!_=le|0R", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/5PUB@%}^F0B|!_=le|0R", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(file0, 72057594037927808L, 0L, 87855567, 72057594037927808L, serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File /tmp/5PUB@%}^F0B|!_=le|0R/ffffffffffff80.txn suddenly appeared, is another bookie process running?
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, 3601L, 147483648, 363, 147483648, true, (-250), serverConfiguration0, (FileChannelProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      assertNotNull(serverConfiguration0);
      assertFalse(serverConfiguration0.isDetailEvents());
      assertFalse(serverConfiguration0.isThrowExceptionOnMissing());
      
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      assertNotNull(defaultFileChannelProvider0);
      assertFalse(defaultFileChannelProvider0.supportReuseFile());
      
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, 4L, 4L, (-1), 771, true, 1534, serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -1 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, ".txn");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, 0L, 0L, 0, 0, false, 926, serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  /*@Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setExecutable(true, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("4.txn");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      ServerConfiguration serverConfiguration1 = serverConfiguration0.setTLSTrustStoreType("enforceMinNumFaultDomainsForWrite");
      ServerConfiguration serverConfiguration2 = serverConfiguration1.setJournalMaxMemorySizeMb(1534);
      ServerConfiguration serverConfiguration3 = serverConfiguration2.setHttpServerTrustStorePasswordPassword("desiredNumZonesPerWriteQuorum");
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, 4L, 4L, 1, 1, true, 1534, serverConfiguration3, defaultFileChannelProvider0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid journal version, unable to read. Expected between (1) and (6), got (1534)
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.bookkeeper.bookie.JournalChannel", "org.apache.bookkeeper.bookie.JournalChannel");
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = mock(Journal.BufferedChannelBuilder.class, new ViolatedAssumptionAnswer());
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      Long long0 = new Long((-2146992231));
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 4294967295L, 4294967295L, (-2146992231), Integer.MAX_VALUE, true, (-11), journal_BufferedChannelBuilder0, serverConfiguration0, defaultFileChannelProvider0, long0);
  }*/

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Long long0 = Long.valueOf(5000L);
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel((File) null, 0L, 4704L, 0, (-1), true, (-5), (Journal.BufferedChannelBuilder) null, (ServerConfiguration) null, (FileChannelProvider) null, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("~RqWtjDB,J)>n");
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = mock(Journal.BufferedChannelBuilder.class, new ViolatedAssumptionAnswer());
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      Long long0 = new Long(2114L);
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, (byte)8, (-3022L), 23, 0, false, (byte)8, journal_BufferedChannelBuilder0, serverConfiguration0, defaultFileChannelProvider0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile("J!NPXbG2B;]. u", "Invalid journal format to write : version = ");
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(file0, (-12345L));
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File /tmp/J!NPXbG2B;]. u0Invalid journal format to write : version = /ffffffffffffcfc7.txn suddenly appeared, is another bookie process running?
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, (-4096L));
      journalChannel0.forceWrite(true);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sC<CI@IIpZO");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sC<CI@IIpZO/927c0.txn");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "ignoreLocalNodeInPlacementPolicy");
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 600000L);
      journalChannel0.close();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("oadg(]x{o1J`ZOvWo@");
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 0L);
      journalChannel0.preAllocIfNeeded(512L);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sC<CI@IIpZO");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sC<CI@IIpZO/927c0.txn");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "ignoreLocalNodeInPlacementPolicy");
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 600000L);
      try { 
        journalChannel0.getBufferedChannel();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read only journal channel
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JournalChannel journalChannel0 = new JournalChannel((File) null, (-1183L));
      BufferedChannel bufferedChannel0 = journalChannel0.getBufferedChannel();
      assertEquals(512L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("BKLG", "BKLG");
      try { 
        JournalChannel.renameJournalFile(mockFile0, (File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to rename file /home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/BKLG/BKLG to null
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      try { 
        JournalChannel.renameJournalFile((File) null, (File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to rename file null to null
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("[Bv>^ $&W#^F.zi7~", "[Bv>^ $&W#^F.zi7~");
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = mock(Journal.BufferedChannelBuilder.class, new ViolatedAssumptionAnswer());
      doReturn((BufferedChannel) null).when(journal_BufferedChannelBuilder0).create(any(java.nio.channels.FileChannel.class) , anyInt());
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      Long long0 = new Long(2);
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, (-1083L), 1000000000L, 2, 2, true, 4, journal_BufferedChannelBuilder0, serverConfiguration0, defaultFileChannelProvider0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("[Bv>^ $&W#^F.zi7~", "[Bv>^ $&W#^F.zi7~");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[Bv>^ $&W#^F.zi7~/[Bv>^ $&W#^F.zi7~/fffffffffffffbc5.txn");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = mock(Journal.BufferedChannelBuilder.class, new ViolatedAssumptionAnswer());
      mockFile0.mkdirs();
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      ServerConfiguration serverConfiguration1 = serverConfiguration0.setServerNumIOThreads((-3496));
      ServerConfiguration serverConfiguration2 = serverConfiguration1.setMinorCompactionThreshold(520.16600905);
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      serverConfiguration2.containsValue((Object) null);
      Long long0 = new Long(8L);
      serverConfiguration0.isGcEntryLogMetadataCacheEnabled();
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, (-1083L), 1000000000L, 2, 2, true, 4, journal_BufferedChannelBuilder0, serverConfiguration2, defaultFileChannelProvider0, long0);
      try { 
        journalChannel0.getBufferedChannel();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Read only journal channel
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("sC<CI@IIpZO");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("sC<CI@IIpZO/927c0.txn");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "ignoreLocalNodeInPlacementPolicy");
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 600000L, 600000L, 567, serverConfiguration0, defaultFileChannelProvider0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile(", dependency=", ", dependency=");
      File file0 = MockFile.createTempFile(", dependency=", ", dependency=", (File) mockFile0);
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = mock(Journal.BufferedChannelBuilder.class, new ViolatedAssumptionAnswer());
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      Long long0 = new Long(0L);
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(file0, 0L, 0L, 195, 195, false, 195, journal_BufferedChannelBuilder0, serverConfiguration0, defaultFileChannelProvider0, long0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // File /home/fmasci/progetti_uni/isw2/testing/bookkeeper/bookkeeper-server/, dependency=/, dependency=/, dependency=0, dependency=/0.txn suddenly appeared, is another bookie process running?
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      File file0 = MockFile.createTempFile("Failed to rename file ", "WRrSp9NKKu4~H");
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = mock(Journal.BufferedChannelBuilder.class, new ViolatedAssumptionAnswer());
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      Long long0 = new Long((byte)19);
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(file0, (-104L), (-104L), (-2147483134), 1801, false, (-2147483134), journal_BufferedChannelBuilder0, serverConfiguration0, defaultFileChannelProvider0, long0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Invalid journal format to write : version = -2147483134
         //
         verifyException("org.apache.bookkeeper.bookie.JournalChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 4L, 4L, 1, 1, true, 1534, serverConfiguration0, defaultFileChannelProvider0);
      journalChannel0.forceWrite(false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" as there is no quorum", " as there is no quorum");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannelProvider defaultFileChannelProvider0 = new DefaultFileChannelProvider();
      JournalChannel journalChannel0 = null;
      try {
        journalChannel0 = new JournalChannel(mockFile0, 4L, 4L, 8, 771, false, 1534, serverConfiguration0, defaultFileChannelProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JournalChannel journalChannel0 = new JournalChannel((File) null, 0);
      int int0 = journalChannel0.read(journalChannel0.zeros);
      assertEquals(0, int0);
  }
}
