/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 21 16:23:17 GMT 2025
 */

package org.apache.bookkeeper.bookie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledUnsafeDirectByteBuf;
import java.io.File;
import java.nio.channels.FileChannel;
import java.util.List;
import org.apache.bookkeeper.bookie.BookieImpl;
import org.apache.bookkeeper.bookie.BufferedChannel;
import org.apache.bookkeeper.bookie.CheckpointSource;
import org.apache.bookkeeper.bookie.DefaultFileChannel;
import org.apache.bookkeeper.bookie.Journal;
import org.apache.bookkeeper.bookie.JournalAliveListener;
import org.apache.bookkeeper.bookie.JournalChannel;
import org.apache.bookkeeper.bookie.LedgerDirsManager;
import org.apache.bookkeeper.bookie.LogMark;
import org.apache.bookkeeper.bookie.stats.JournalStats;
import org.apache.bookkeeper.common.collections.BatchedBlockingQueue;
import org.apache.bookkeeper.common.util.MemoryLimitController;
import org.apache.bookkeeper.conf.ServerConfiguration;
import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;
import org.apache.bookkeeper.stats.CachingStatsLogger;
import org.apache.bookkeeper.stats.Counter;
import org.apache.bookkeeper.stats.NullStatsLogger;
import org.apache.bookkeeper.stats.OpStatsLogger;
import org.apache.bookkeeper.util.DiskChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Journal_ESTest extends Journal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      JournalAliveListener journalAliveListener0 = mock(JournalAliveListener.class, new ViolatedAssumptionAnswer());
      Journal journal1 = new Journal(87855567, fileArray0[0], serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0, journalAliveListener0);
      BatchedBlockingQueue<Journal.ForceWriteRequest> batchedBlockingQueue0 = journal1.forceWriteRequests;
      journal0.setForceWriteRequests(batchedBlockingQueue0);
      assertNotSame(journal1, journal0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Journal.JournalScanner journal_JournalScanner0 = mock(Journal.JournalScanner.class, new ViolatedAssumptionAnswer());
      long long0 = journal0.scanJournal((-2277L), (-16384L), journal_JournalScanner0, false);
      assertEquals(516L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle", "io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      ServerConfiguration serverConfiguration1 = serverConfiguration0.setJournalAdaptiveGroupWrites(false);
      Journal journal0 = null;
      try {
        journal0 = new Journal(70454, mockFile0, serverConfiguration1, (LedgerDirsManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal$LastLogMark", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(1913);
      Journal journal0 = new Journal(1913, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      BookieImpl.NopWriteCallback bookieImpl_NopWriteCallback0 = new BookieImpl.NopWriteCallback();
      OpStatsLogger opStatsLogger0 = nullStatsLogger0.getThreadScopedOpStatsLogger("minNumZonesPerWriteQuorum");
      CachingStatsLogger cachingStatsLogger0 = new CachingStatsLogger(nullStatsLogger0);
      Counter counter0 = cachingStatsLogger0.getCounter("CJM*^|*T,8`^Dr");
      Journal.QueueEntry journal_QueueEntry0 = Journal.QueueEntry.create(compositeByteBuf0, false, (-16384L), (-16384L), bookieImpl_NopWriteCallback0, "@Z{5R|ZpzGe?U1`Z", (-2277L), opStatsLogger0, counter0);
      journal_QueueEntry0.run();
      BookieImpl.NopWriteCallback bookieImpl_NopWriteCallback1 = (BookieImpl.NopWriteCallback)journal_QueueEntry0.cb;
      journal0.logAddEntry((long) 1913, (-2277L), (ByteBuf) compositeByteBuf0, false, (BookkeeperInternalCallbacks.WriteCallback) null, (Object) serverConfiguration0);
      // Undeclared exception!
      try { 
        journal_QueueEntry0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal$QueueEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Journal.LastLogMark journal_LastLogMark0 = journal0.new LastLogMark((-1L), 9L);
      Journal.LastLogMark journal_LastLogMark1 = journal0.getLastLogMark();
      journal_LastLogMark0.rollLog(journal_LastLogMark1);
      assertNotSame(journal_LastLogMark1, journal_LastLogMark0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      Journal journal0 = new Journal(10, fileArray0[0], serverConfiguration0, ledgerDirsManager0);
      Journal.LastLogMark journal_LastLogMark0 = journal0.new LastLogMark(1945, 382);
      Journal.LastLogMark journal_LastLogMark1 = journal_LastLogMark0.markLog();
      assertNotSame(journal_LastLogMark1, journal_LastLogMark0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = Journal.BufferedChannelBuilder.DEFAULT_BCBUILDER;
      MockFile mockFile0 = new MockFile("Couldn't read enough bytes from lastMark. Wanted 16, got ", "");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      DefaultFileChannel defaultFileChannel0 = new DefaultFileChannel(mockFile0, serverConfiguration0);
      FileChannel fileChannel0 = defaultFileChannel0.getFileChannel();
      BufferedChannel bufferedChannel0 = journal_BufferedChannelBuilder0.create(fileChannel0, 0);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckpointSource.Checkpoint checkpointSource_Checkpoint0 = journal0.newCheckpoint();
      journal0.checkpointComplete(checkpointSource_Checkpoint0, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      JournalAliveListener journalAliveListener0 = mock(JournalAliveListener.class, new ViolatedAssumptionAnswer());
      Journal journal0 = Journal.newJournal(382, fileArray0[0], serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0, journalAliveListener0);
      assertNotNull(journal0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(1945);
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      BookieImpl.NopWriteCallback bookieImpl_NopWriteCallback0 = new BookieImpl.NopWriteCallback();
      journal0.logAddEntry((long) 1945, (-2277L), (ByteBuf) compositeByteBuf0, false, (BookkeeperInternalCallbacks.WriteCallback) bookieImpl_NopWriteCallback0, (Object) serverConfiguration0);
      int int0 = journal0.getJournalQueueLength();
      // assertEquals(1, pooledByteBufAllocator0.numThreadLocalCaches());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8^KG", "aE");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("8^KG/aE/5ed.txn");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "For ledger: {}, in Segment: {}, no entry is expected to contain in this bookie: {}. So skipping getListOfEntriesOfLedger call");
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 1517L);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 496, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        Journal.writePaddingBytes(journalChannel0, unpooledUnsafeDirectByteBuf0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Journal.listJournalIds((File) null, (Journal.JournalIdFilter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":<DEV");
      NullStatsLogger nullStatsLogger0 = NullStatsLogger.INSTANCE;
      Journal journal0 = null;
      try {
        journal0 = new Journal(1568, mockFile0, (ServerConfiguration) null, (LedgerDirsManager) null, nullStatsLogger0, (ByteBufAllocator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("FhT+V&M-M*");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      serverConfiguration0.setJournalQueueSize((-879));
      File[] fileArray0 = new File[6];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      fileArray0[4] = (File) mockFile0;
      fileArray0[5] = (File) mockFile0;
      NullStatsLogger nullStatsLogger0 = NullStatsLogger.INSTANCE;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null, nullStatsLogger0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false);
      Journal journal0 = null;
      try {
        journal0 = new Journal((-879), mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, unpooledByteBufAllocator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.common.collections.BatchedArrayBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Unable to acquire CPU core for Journal thread: {}", "m{88mG5[t@yzeTz ");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      ServerConfiguration serverConfiguration1 = serverConfiguration0.setJournalChannelProvider("enforceMinNumFaultDomainsForWrite");
      File[] fileArray0 = new File[4];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      fileArray0[2] = (File) mockFile0;
      fileArray0[3] = (File) mockFile0;
      NullStatsLogger nullStatsLogger0 = NullStatsLogger.INSTANCE;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null, nullStatsLogger0);
      Journal journal0 = null;
      try {
        journal0 = new Journal(6, mockFile0, serverConfiguration1, ledgerDirsManager0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.ClassNotFoundException: Class 'enforceMinNumFaultDomainsForWrite.class' should be in target project, but could not be found!
         //
         verifyException("org.apache.bookkeeper.bookie.Journal", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      journal0.interruptThread();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      journal0.joinThread();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      Journal journal0 = new Journal(10, fileArray0[0], serverConfiguration0, ledgerDirsManager0);
      Journal.LastLogMark journal_LastLogMark0 = journal0.new LastLogMark(1945, 382);
      journal_LastLogMark0.readLog();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Journal.JournalScanner journal_JournalScanner0 = mock(Journal.JournalScanner.class, new ViolatedAssumptionAnswer());
      journal0.scanJournal((-2257L), (-2257L), journal_JournalScanner0, false);
      Journal.JournalIdFilter journal_JournalIdFilter0 = mock(Journal.JournalIdFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Journal.listJournalIds(fileArray0[1], journal_JournalIdFilter0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fffffffffffff72f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      Journal.JournalIdFilter journal_JournalIdFilter0 = mock(Journal.JournalIdFilter.class, new ViolatedAssumptionAnswer());
      List<Long> list0 = Journal.listJournalIds(fileArray0[1], journal_JournalIdFilter0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Journal.BufferedChannelBuilder journal_BufferedChannelBuilder0 = journal0.getBufferedChannelBuilder();
      assertNotNull(journal_BufferedChannelBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      ServerConfiguration serverConfiguration1 = serverConfiguration0.setJournalFlushWhenQueueEmpty(true);
      Journal journal0 = null;
      try {
        journal0 = new Journal((-443), mockFile0, serverConfiguration1, (LedgerDirsManager) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal$LastLogMark", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8^KG", "aE");
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 1517L);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 496, Integer.MAX_VALUE);
      Journal.writePaddingBytes(journalChannel0, unpooledUnsafeDirectByteBuf0, 496);
      assertTrue(unpooledUnsafeDirectByteBuf0.isReadable());
      assertEquals(480, unpooledUnsafeDirectByteBuf0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = NullStatsLogger.INSTANCE;
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(1945);
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Long long0 = new Long(1945);
      JournalChannel journalChannel0 = journal0.newLogFile(3934L, long0);
      // Undeclared exception!
      try { 
        Journal.writePaddingBytes(journalChannel0, compositeByteBuf0, (-1256));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 0, writerIndex: -3024 (expected: 0 <= readerIndex <= writerIndex <= capacity(64))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("8^KG", "aE");
      JournalChannel journalChannel0 = new JournalChannel(mockFile0, 1517L);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 496, Integer.MAX_VALUE);
      Journal.writePaddingBytes(journalChannel0, unpooledUnsafeDirectByteBuf0, (-1));
      assertTrue(unpooledUnsafeDirectByteBuf0.isContiguous());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/@Z{5R|ZpzGe?U1`Z/current/lastMark");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "bookieMaxMultipleForWeightBasedPlacement");
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      Journal journal0 = new Journal(10, fileArray0[0], serverConfiguration0, ledgerDirsManager0);
      Journal.LastLogMark journal_LastLogMark0 = journal0.new LastLogMark(1945, 382);
      journal_LastLogMark0.readLog();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "direct buffer");
      Journal.JournalIdFilter journal_JournalIdFilter0 = mock(Journal.JournalIdFilter.class, new ViolatedAssumptionAnswer());
      List<Long> list0 = Journal.listJournalIds(mockFile0, journal_JournalIdFilter0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Journal.LastLogMark journal_LastLogMark0 = journal0.new LastLogMark((-16384L), (-32768L));
      String string0 = journal_LastLogMark0.toString();
      assertEquals("LogMark: logFileId - -16384 , logFileOffset - -32768", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("(", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = NullStatsLogger.INSTANCE;
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      CheckpointSource.Checkpoint checkpointSource_Checkpoint0 = journal0.newCheckpoint();
      journal0.checkpointComplete(checkpointSource_Checkpoint0, true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("BOkn5p3nhDWy!", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null, nullStatsLogger0);
      JournalAliveListener journalAliveListener0 = mock(JournalAliveListener.class, new ViolatedAssumptionAnswer());
      Journal journal0 = new Journal(1945, fileArray0[0], serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0, journalAliveListener0);
      journal0.shutdown();
      journal0.shutdown();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      File file0 = journal0.getJournalDirectory();
      assertEquals("/", file0.getParent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      JournalStats journalStats0 = journal0.getJournalStats();
      assertNotNull(journalStats0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      JournalAliveListener journalAliveListener0 = mock(JournalAliveListener.class, new ViolatedAssumptionAnswer());
      Journal journal0 = null;
      try {
        journal0 = new Journal(5, mockFile0, serverConfiguration0, (LedgerDirsManager) null, nullStatsLogger0, pooledByteBufAllocator0, journalAliveListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal$LastLogMark", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      int int0 = journal0.getJournalQueueLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".txn", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Long long0 = Long.valueOf((-898L));
      journal0.setLastLogMark(long0, 1945);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      JournalAliveListener journalAliveListener0 = mock(JournalAliveListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Journal.newJournal(0, mockFile0, serverConfiguration0, (LedgerDirsManager) null, nullStatsLogger0, pooledByteBufAllocator0, journalAliveListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.Journal$LastLogMark", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("BOkn5p3nhDWy!", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      MemoryLimitController memoryLimitController0 = new MemoryLimitController(1945);
      journal0.setMemoryLimitController(memoryLimitController0);
      assertEquals(0L, memoryLimitController0.currentUsage());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      long long0 = journal0.getMemoryUsage();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      journal0.start();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      BookieImpl.NopWriteCallback bookieImpl_NopWriteCallback0 = new BookieImpl.NopWriteCallback();
      journal0.forceLedger(1388L, bookieImpl_NopWriteCallback0, nullStatsLogger0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      Journal.LastLogMark journal_LastLogMark0 = journal0.getLastLogMark();
      LogMark logMark0 = journal_LastLogMark0.getCurMark();
      assertEquals(0L, logMark0.getLogFileId());
      assertEquals(0L, logMark0.getLogFileOffset());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "@Z{5R|ZpzGe?U1`Z");
      ServerConfiguration serverConfiguration0 = new ServerConfiguration();
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      fileArray0[1] = (File) mockFile0;
      LedgerDirsManager ledgerDirsManager0 = new LedgerDirsManager(serverConfiguration0, fileArray0, (DiskChecker) null);
      NullStatsLogger nullStatsLogger0 = new NullStatsLogger();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(1945);
      Journal journal0 = new Journal(1945, mockFile0, serverConfiguration0, ledgerDirsManager0, nullStatsLogger0, pooledByteBufAllocator0);
      BookieImpl.NopWriteCallback bookieImpl_NopWriteCallback0 = new BookieImpl.NopWriteCallback();
      // Undeclared exception!
      try { 
        journal0.logAddEntry((ByteBuf) compositeByteBuf0, true, (BookkeeperInternalCallbacks.WriteCallback) bookieImpl_NopWriteCallback0, (Object) fileArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 0, length: 8 (expected: range(0, 0))
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }
}
